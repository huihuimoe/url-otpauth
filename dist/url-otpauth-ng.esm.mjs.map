{"version":3,"file":"url-otpauth-ng.esm.mjs","sources":["../index.js"],"sourcesContent":["/*!\n * https://github.com/huihuimoe/url-otpauth-ng\n * Released under the MIT license\n */\n\nconst _URL = typeof URL !== 'undefined' ? URL : require('url').URL\n\n//\n// Exception types\n//\n\n/**\n * Enumeration of all error types raised by `OtpauthInvalidURL`.\n */\nexport const ErrorType = {\n    INVALID_ISSUER: 0,\n    INVALID_LABEL: 1,\n    INVALID_PROTOCOL: 2,\n    MISSING_ACCOUNT_NAME: 3,\n    MISSING_COUNTER: 4,\n    MISSING_ISSUER: 5,\n    MISSING_SECRET_KEY: 6,\n    UNKNOWN_OTP: 7,\n    INVALID_DIGITS: 8,\n    UNKNOWN_ALGORITHM: 9\n}\n\n/**\n * Exception thrown whenever there's an error deconstructing an 'otpauth://' URI.\n *\n * You can query the `errorType` attribute to obtain the exact reason for failure. The\n * `errorType` attributes contains a value from the `ErrorType` enumeration.\n */\nexport function OtpauthInvalidURL(errorType) {\n    this.name = 'OtpauthInvalidURL'\n    this.errorType = errorType\n    for (const type in ErrorType)\n        if (ErrorType[type] === errorType)\n            this.message =\n                'Given otpauth:// URL is invalid. (Error ' + type + ')'\n}\nOtpauthInvalidURL.prototype = new Error()\nOtpauthInvalidURL.prototype.constructor = OtpauthInvalidURL\n\nconst PossibleDigits = [6, 8]\nconst PossibleAlgorithms = ['SHA1', 'SHA256', 'SHA512', 'MD5']\n\n/**\n * Parses an OTPAuth URI.\n *\n * Parses an URL as described in Google Authenticator's \"KeyUriFormat\" document (see:\n * [https://github.com/google/google-authenticator/wiki/Key-Uri-Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format))\n * and returns an object that contains the following properties:\n *\n * - `account`: The account name.\n * - `digits`: The number of digits of the resulting OTP. Default is 6 (six).\n * - `key`: The shared key in Base32 encoding.\n * - `issuer`: Provider or service this account is associated with. The default is the empty string.\n * - `type`: Either the string `hotp` or `totp`.\n *\n * OTP of type `hotp` have an additional `counter` field which contains the start value for the\n * HOTP counter. In all other cases this field is missing from the resulting object.\n *\n **/\nexport function parse(rawUrl) {\n    const decode = decodeURIComponent\n    const ret = {}\n\n    //\n    // Protocol\n    //\n    let parsed\n\n    try {\n        parsed = new _URL(rawUrl)\n    } catch (error) {\n        throw error instanceof TypeError\n            ? new OtpauthInvalidURL(ErrorType.INVALID_PROTOCOL)\n            : error\n    }\n\n    if (parsed.protocol !== 'otpauth:') {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_PROTOCOL)\n    }\n\n    parsed.protocol = 'http'\n    parsed = new _URL(parsed)\n\n    //\n    // Type\n    //\n\n    const otpAlgo = decode(parsed.host)\n\n    if (otpAlgo !== 'hotp' && otpAlgo !== 'totp') {\n        throw new OtpauthInvalidURL(ErrorType.UNKNOWN_OTP)\n    }\n\n    ret.type = otpAlgo\n\n    //\n    // Label (contains account name, may contain issuer)\n    //\n\n    const label = parsed.pathname.substring(1)\n    const labelComponents = label.split(~label.indexOf(':') ? ':' : '%3A')\n    let issuer = ''\n    let account = ''\n\n    if (labelComponents.length === 1) {\n        account = decode(labelComponents[0])\n    } else if (labelComponents.length === 2) {\n        issuer = decode(labelComponents[0])\n        account = decode(labelComponents[1])\n    } else {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_LABEL)\n    }\n\n    if (account.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_ACCOUNT_NAME)\n    }\n\n    if (labelComponents.length === 2 && issuer.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.account = account\n\n    //\n    // Parameters\n    //\n\n    const parameters = parsed.searchParams\n\n    // Secret key\n    if (!parameters.has('secret')) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_SECRET_KEY)\n    }\n\n    ret.key = parameters.get('secret')\n\n    // Issuer\n    if (\n        parameters.has('issuer') &&\n        issuer &&\n        parameters.get('issuer') !== issuer\n    ) {\n        // If present, it must be equal to the \"issuer\" specified in the label.\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.issuer = parameters.get('issuer') || issuer\n\n    // OTP digits\n    ret.digits = 6 // Default is 6\n\n    if (parameters.has('digits')) {\n        const parsedDigits = parseInt(parameters.get('digits'), 10)\n        if (PossibleDigits.indexOf(parsedDigits) == -1) {\n            throw new OtpauthInvalidURL(ErrorType.INVALID_DIGITS)\n        } else {\n            ret.digits = parsedDigits\n        }\n    }\n\n    // Algorithm to create hash\n    if (parameters.has('algorithm')) {\n        if (PossibleAlgorithms.indexOf(parameters.get('algorithm')) == -1) {\n            throw new OtpauthInvalidURL(ErrorType.UNKNOWN_ALGORITHM)\n        } else {\n            // Optional 'algorithm' parameter.\n            ret.algorithm = parameters.get('algorithm')\n        }\n    }\n\n    // Period (only for TOTP)\n    if (otpAlgo === 'totp') {\n        // Optional 'period' parameter for TOTP.\n        if (parameters.has('period')) {\n            ret.period = parseFloat(parameters.get('period'))\n        }\n    }\n\n    // Counter (only for HOTP)\n    if (otpAlgo === 'hotp') {\n        if (!parameters.has('counter')) {\n            // We require the 'counter' parameter for HOTP.\n            throw new OtpauthInvalidURL(ErrorType.MISSING_COUNTER)\n        } else {\n            ret.counter = parseInt(parameters.get('counter'), 10)\n        }\n    }\n\n    return ret\n}\n"],"names":[],"mappings":"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"}