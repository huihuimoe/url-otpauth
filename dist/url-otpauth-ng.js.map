{"version":3,"file":"url-otpauth-ng.js","sources":["../src/ErrorType.js","../src/OtpauthInvalidURL.js","../src/parse.js","../index.js"],"sourcesContent":["/**\n * Enumeration of all error types raised by `OtpauthInvalidURL`.\n */\n\nexport const INVALID_ISSUER = 0\nexport const INVALID_LABEL = 1\nexport const INVALID_PROTOCOL = 2\nexport const MISSING_ACCOUNT_NAME = 3\nexport const MISSING_COUNTER = 4\nexport const MISSING_ISSUER = 5\nexport const MISSING_SECRET_KEY = 6\nexport const UNKNOWN_OTP = 7\nexport const INVALID_DIGITS = 8\nexport const UNKNOWN_ALGORITHM = 9\n","import * as ErrorType from './ErrorType'\n\n/**\n * Exception thrown whenever there's an error deconstructing an 'otpauth://' URI.\n *\n * You can query the `errorType` attribute to obtain the exact reason for failure. The\n * `errorType` attributes contains a value from the `ErrorType` enumeration.\n */\nclass OtpauthInvalidURL extends Error {\n    constructor(errorType) {\n        super()\n        this.name = 'OtpauthInvalidURL'\n        this.errorType = errorType\n        for (const type in ErrorType)\n            if (ErrorType[type] === errorType)\n                this.message =\n                    'Given otpauth:// URL is invalid. (Error ' + type + ')'\n    }\n}\n\nexport { OtpauthInvalidURL }\n","import * as ErrorType from './ErrorType'\nimport { OtpauthInvalidURL } from './OtpauthInvalidURL'\n\nconst _URL = typeof URL !== 'undefined' ? URL : require('url').URL\n\nconst PossibleDigits = [6, 8]\nconst PossibleAlgorithms = ['SHA1', 'SHA256', 'SHA512', 'MD5']\n\n/**\n * Parses an OTPAuth URI.\n *\n * Parses an URL as described in Google Authenticator's \"KeyUriFormat\" document (see:\n * [https://github.com/google/google-authenticator/wiki/Key-Uri-Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format))\n * and returns an object that contains the following properties:\n *\n * - `account`: The account name.\n * - `digits`: The number of digits of the resulting OTP. Default is 6 (six).\n * - `key`: The shared key in Base32 encoding.\n * - `issuer`: Provider or service this account is associated with. The default is the empty string.\n * - `type`: Either the string `hotp` or `totp`.\n *\n * OTP of type `hotp` have an additional `counter` field which contains the start value for the\n * HOTP counter. In all other cases this field is missing from the resulting object.\n *\n **/\nexport function parse(rawUrl) {\n    const decode = decodeURIComponent\n    const ret = {}\n\n    //\n    // Protocol\n    //\n    let parsed = new _URL(rawUrl)\n\n    if (parsed.protocol !== 'otpauth:') {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_PROTOCOL)\n    }\n\n    // hack for Chrome\n    parsed.protocol = 'http'\n    parsed = new _URL(parsed)\n\n    //\n    // Type\n    //\n\n    const otpAlgo = decode(parsed.host)\n\n    if (otpAlgo !== 'hotp' && otpAlgo !== 'totp') {\n        throw new OtpauthInvalidURL(ErrorType.UNKNOWN_OTP)\n    }\n\n    ret.type = otpAlgo\n\n    //\n    // Label (contains account name, may contain issuer)\n    //\n\n    const label = parsed.pathname.substring(1)\n    // if you want to support mutli commas in label\n    // const labelComponents = label.split(~label.indexOf(':') ? /:(.*)/ : /%3A(.*)/, 2)\n    const labelComponents = label.split(~label.indexOf(':') ? ':' : '%3A')\n    let issuer = ''\n    let account = ''\n\n    if (labelComponents.length === 1) {\n        account = decode(labelComponents[0])\n    } else if (labelComponents.length === 2) {\n        issuer = decode(labelComponents[0])\n        account = decode(labelComponents[1])\n    } else {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_LABEL)\n    }\n\n    if (account.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_ACCOUNT_NAME)\n    }\n\n    if (labelComponents.length === 2 && issuer.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.account = account\n\n    //\n    // Parameters\n    //\n\n    const parameters = parsed.searchParams\n\n    // Secret key\n    if (!parameters.has('secret')) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_SECRET_KEY)\n    }\n\n    ret.key = parameters.get('secret')\n\n    // Issuer\n    if (\n        parameters.has('issuer') &&\n        issuer &&\n        parameters.get('issuer') !== issuer\n    ) {\n        // If present, it must be equal to the \"issuer\" specified in the label.\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.issuer = parameters.get('issuer') || issuer\n\n    // OTP digits\n    ret.digits = 6 // Default is 6\n\n    if (parameters.has('digits')) {\n        const parsedDigits = parseInt(parameters.get('digits')) || 0\n        if (~PossibleDigits.indexOf(parsedDigits)) {\n            ret.digits = parsedDigits\n        } else {\n            throw new OtpauthInvalidURL(ErrorType.INVALID_DIGITS)\n        }\n    }\n\n    // Algorithm to create hash\n    if (parameters.has('algorithm')) {\n        if (~PossibleAlgorithms.indexOf(parameters.get('algorithm'))) {\n            // Optional 'algorithm' parameter.\n            ret.algorithm = parameters.get('algorithm')\n        } else {\n            throw new OtpauthInvalidURL(ErrorType.UNKNOWN_ALGORITHM)\n        }\n    }\n\n    // Period (only for TOTP)\n    if (otpAlgo === 'totp') {\n        // Optional 'period' parameter for TOTP.\n        if (parameters.has('period')) {\n            ret.period = parseFloat(parameters.get('period')) || 0\n        }\n    }\n\n    // Counter (only for HOTP)\n    if (otpAlgo === 'hotp') {\n        if (parameters.has('counter')) {\n            ret.counter = parseInt(parameters.get('counter')) || 0\n        } else {\n            // We require the 'counter' parameter for HOTP.\n            throw new OtpauthInvalidURL(ErrorType.MISSING_COUNTER)\n        }\n    }\n\n    return ret\n}\n","/*!\n * https://github.com/huihuimoe/url-otpauth-ng\n * Released under the MIT license\n */\n\nimport * as ErrorType from './src/ErrorType'\nimport { OtpauthInvalidURL } from './src/OtpauthInvalidURL'\nimport { parse } from './src/parse'\nexport { ErrorType, OtpauthInvalidURL, parse }\n"],"names":["ErrorType.INVALID_PROTOCOL","ErrorType.UNKNOWN_OTP","ErrorType.INVALID_LABEL","ErrorType.MISSING_ACCOUNT_NAME","ErrorType.INVALID_ISSUER","ErrorType.MISSING_SECRET_KEY","ErrorType.INVALID_DIGITS","ErrorType.UNKNOWN_ALGORITHM","ErrorType.MISSING_COUNTER"],"mappings":"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"}