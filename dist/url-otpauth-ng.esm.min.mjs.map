{"version":3,"file":"url-otpauth-ng.esm.min.mjs","sources":["../src/ErrorType.js","../src/OtpauthInvalidURL.js","../src/parse.js"],"sourcesContent":["/**\n * Enumeration of all error types raised by `OtpauthInvalidURL`.\n */\n\nexport const INVALID_ISSUER = 0\nexport const INVALID_LABEL = 1\nexport const INVALID_PROTOCOL = 2\nexport const MISSING_ACCOUNT_NAME = 3\nexport const MISSING_COUNTER = 4\nexport const MISSING_ISSUER = 5\nexport const MISSING_SECRET_KEY = 6\nexport const UNKNOWN_OTP = 7\nexport const INVALID_DIGITS = 8\nexport const UNKNOWN_ALGORITHM = 9\n","import * as ErrorType from './ErrorType'\n\n/**\n * Exception thrown whenever there's an error deconstructing an 'otpauth://' URI.\n *\n * You can query the `errorType` attribute to obtain the exact reason for failure. The\n * `errorType` attributes contains a value from the `ErrorType` enumeration.\n */\nclass OtpauthInvalidURL extends Error {\n    constructor(errorType) {\n        super()\n        this.name = 'OtpauthInvalidURL'\n        this.errorType = errorType\n        for (const type in ErrorType)\n            if (ErrorType[type] === errorType)\n                this.message =\n                    'Given otpauth:// URL is invalid. (Error ' + type + ')'\n    }\n}\n\nexport { OtpauthInvalidURL }\n","import * as ErrorType from './ErrorType'\nimport { OtpauthInvalidURL } from './OtpauthInvalidURL'\n\nconst _URL = typeof URL !== 'undefined' ? URL : require('url').URL\n\nconst PossibleDigits = [6, 8]\nconst PossibleAlgorithms = ['SHA1', 'SHA256', 'SHA512', 'MD5']\n\n/**\n * Parses an OTPAuth URI.\n *\n * Parses an URL as described in Google Authenticator's \"KeyUriFormat\" document (see:\n * [https://github.com/google/google-authenticator/wiki/Key-Uri-Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format))\n * and returns an object that contains the following properties:\n *\n * - `account`: The account name.\n * - `digits`: The number of digits of the resulting OTP. Default is 6 (six).\n * - `key`: The shared key in Base32 encoding.\n * - `issuer`: Provider or service this account is associated with. The default is the empty string.\n * - `type`: Either the string `hotp` or `totp`.\n *\n * OTP of type `hotp` have an additional `counter` field which contains the start value for the\n * HOTP counter. In all other cases this field is missing from the resulting object.\n *\n **/\nexport function parse(rawUrl) {\n    const decode = decodeURIComponent\n    const ret = {}\n\n    //\n    // Protocol\n    //\n    let parsed = new _URL(rawUrl)\n\n    if (parsed.protocol !== 'otpauth:') {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_PROTOCOL)\n    }\n\n    // hack for Chrome\n    parsed.protocol = 'http'\n    parsed = new _URL(parsed)\n\n    //\n    // Type\n    //\n\n    const otpAlgo = decode(parsed.host)\n\n    if (otpAlgo !== 'hotp' && otpAlgo !== 'totp') {\n        throw new OtpauthInvalidURL(ErrorType.UNKNOWN_OTP)\n    }\n\n    ret.type = otpAlgo\n\n    //\n    // Label (contains account name, may contain issuer)\n    //\n\n    const label = parsed.pathname.substring(1)\n    // if you want to support mutli commas in label\n    // const labelComponents = label.split(~label.indexOf(':') ? /:(.*)/ : /%3A(.*)/, 2)\n    const labelComponents = label.split(~label.indexOf(':') ? ':' : '%3A')\n    let issuer = ''\n    let account = ''\n\n    if (labelComponents.length === 1) {\n        account = decode(labelComponents[0])\n    } else if (labelComponents.length === 2) {\n        issuer = decode(labelComponents[0])\n        account = decode(labelComponents[1])\n    } else {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_LABEL)\n    }\n\n    if (account.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_ACCOUNT_NAME)\n    }\n\n    if (labelComponents.length === 2 && issuer.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.account = account\n\n    //\n    // Parameters\n    //\n\n    const parameters = parsed.searchParams\n\n    // Secret key\n    if (!parameters.has('secret')) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_SECRET_KEY)\n    }\n\n    ret.key = parameters.get('secret')\n\n    // Issuer\n    if (\n        parameters.has('issuer') &&\n        issuer &&\n        parameters.get('issuer') !== issuer\n    ) {\n        // If present, it must be equal to the \"issuer\" specified in the label.\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.issuer = parameters.get('issuer') || issuer\n\n    // OTP digits\n    ret.digits = 6 // Default is 6\n\n    if (parameters.has('digits')) {\n        const parsedDigits = parseInt(parameters.get('digits')) || 0\n        if (~PossibleDigits.indexOf(parsedDigits)) {\n            ret.digits = parsedDigits\n        } else {\n            throw new OtpauthInvalidURL(ErrorType.INVALID_DIGITS)\n        }\n    }\n\n    // Algorithm to create hash\n    if (parameters.has('algorithm')) {\n        if (~PossibleAlgorithms.indexOf(parameters.get('algorithm'))) {\n            // Optional 'algorithm' parameter.\n            ret.algorithm = parameters.get('algorithm')\n        } else {\n            throw new OtpauthInvalidURL(ErrorType.UNKNOWN_ALGORITHM)\n        }\n    }\n\n    // Period (only for TOTP)\n    if (otpAlgo === 'totp') {\n        // Optional 'period' parameter for TOTP.\n        if (parameters.has('period')) {\n            ret.period = parseFloat(parameters.get('period')) || 0\n        }\n    }\n\n    // Counter (only for HOTP)\n    if (otpAlgo === 'hotp') {\n        if (parameters.has('counter')) {\n            ret.counter = parseInt(parameters.get('counter')) || 0\n        } else {\n            // We require the 'counter' parameter for HOTP.\n            throw new OtpauthInvalidURL(ErrorType.MISSING_COUNTER)\n        }\n    }\n\n    return ret\n}\n"],"names":["INVALID_ISSUER","INVALID_LABEL","INVALID_PROTOCOL","MISSING_ACCOUNT_NAME","MISSING_COUNTER","MISSING_SECRET_KEY","UNKNOWN_OTP","INVALID_DIGITS","UNKNOWN_ALGORITHM","OtpauthInvalidURL","Error","[object Object]","errorType","super","this","name","type","ErrorType","message","_URL","URL","require","PossibleDigits","PossibleAlgorithms","parse","rawUrl","decode","decodeURIComponent","ret","parsed","protocol","ErrorType.INVALID_PROTOCOL","otpAlgo","host","ErrorType.UNKNOWN_OTP","label","pathname","substring","labelComponents","split","indexOf","issuer","account","length","ErrorType.INVALID_LABEL","ErrorType.MISSING_ACCOUNT_NAME","ErrorType.INVALID_ISSUER","parameters","searchParams","has","ErrorType.MISSING_SECRET_KEY","key","get","digits","parsedDigits","parseInt","ErrorType.INVALID_DIGITS","ErrorType.UNKNOWN_ALGORITHM","algorithm","period","parseFloat","ErrorType.MISSING_COUNTER","counter"],"mappings":"AAIA,MAAaA,EAAiB,EACjBC,EAAgB,EAChBC,EAAmB,EACnBC,EAAuB,EACvBC,EAAkB,EAElBC,EAAqB,EACrBC,EAAc,EACdC,EAAiB,EACjBC,EAAoB,qHAJH,2ECD9B,MAAMC,UAA0BC,MAC5BC,YAAYC,GACRC,QACAC,KAAKC,KAAO,oBACZD,KAAKF,UAAYA,EACjB,IAAK,MAAMI,KAAQC,EACXA,EAAUD,KAAUJ,IACpBE,KAAKI,QACD,2CAA6CF,EAAO,MCbxE,MAAMG,EAAsB,oBAARC,IAAsBA,IAAMC,QAAQ,OAAOD,IAEzDE,EAAiB,CAAC,EAAG,GACrBC,EAAqB,CAAC,OAAQ,SAAU,SAAU,OAmBjD,SAASC,EAAMC,GAClB,MAAMC,EAASC,mBACTC,EAAM,GAKZ,IAAIC,EAAS,IAAIV,EAAKM,GAEtB,GAAwB,aAApBI,EAAOC,SACP,MAAM,IAAIrB,EAAkBsB,GAIhCF,EAAOC,SAAW,OAOlB,MAAME,EAAUN,GANhBG,EAAS,IAAIV,EAAKU,IAMYI,MAE9B,GAAgB,SAAZD,GAAkC,SAAZA,EACtB,MAAM,IAAIvB,EAAkByB,GAGhCN,EAAIZ,KAAOgB,EAMX,MAAMG,EAAQN,EAAOO,SAASC,UAAU,GAGlCC,EAAkBH,EAAMI,OAAOJ,EAAMK,QAAQ,KAAO,IAAM,OAChE,IAAIC,EAAS,GACTC,EAAU,GAEd,GAA+B,IAA3BJ,EAAgBK,OAChBD,EAAUhB,EAAOY,EAAgB,QAC9B,CAAA,GAA+B,IAA3BA,EAAgBK,OAIvB,MAAM,IAAIlC,EAAkBmC,GAH5BH,EAASf,EAAOY,EAAgB,IAChCI,EAAUhB,EAAOY,EAAgB,IAKrC,GAAII,EAAQC,OAAS,EACjB,MAAM,IAAIlC,EAAkBoC,GAGhC,GAA+B,IAA3BP,EAAgBK,QAAgBF,EAAOE,OAAS,EAChD,MAAM,IAAIlC,EAAkBqC,GAGhClB,EAAIc,QAAUA,EAMd,MAAMK,EAAalB,EAAOmB,aAG1B,IAAKD,EAAWE,IAAI,UAChB,MAAM,IAAIxC,EAAkByC,GAMhC,GAHAtB,EAAIuB,IAAMJ,EAAWK,IAAI,UAIrBL,EAAWE,IAAI,WACfR,GACAM,EAAWK,IAAI,YAAcX,EAG7B,MAAM,IAAIhC,EAAkBqC,GAQhC,GALAlB,EAAIa,OAASM,EAAWK,IAAI,WAAaX,EAGzCb,EAAIyB,OAAS,EAETN,EAAWE,IAAI,UAAW,CAC1B,MAAMK,EAAeC,SAASR,EAAWK,IAAI,YAAc,EAC3D,KAAK9B,EAAekB,QAAQc,GAGxB,MAAM,IAAI7C,EAAkB+C,GAF5B5B,EAAIyB,OAASC,EAOrB,GAAIP,EAAWE,IAAI,aAAc,CAC7B,KAAK1B,EAAmBiB,QAAQO,EAAWK,IAAI,cAI3C,MAAM,IAAI3C,EAAkBgD,GAF5B7B,EAAI8B,UAAYX,EAAWK,IAAI,aAevC,GARgB,SAAZpB,GAEIe,EAAWE,IAAI,YACfrB,EAAI+B,OAASC,WAAWb,EAAWK,IAAI,YAAc,GAK7C,SAAZpB,EAAoB,CACpB,IAAIe,EAAWE,IAAI,WAIf,MAAM,IAAIxC,EAAkBoD,GAH5BjC,EAAIkC,QAAUP,SAASR,EAAWK,IAAI,aAAe,EAO7D,OAAOxB"}