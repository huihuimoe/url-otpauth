{"version":3,"file":"url-otpauth-ng.esm.min.mjs","sources":["../index.js"],"sourcesContent":["/*!\n * https://github.com/huihuimoe/url-otpauth-ng\n * Released under the MIT license\n */\n\nconst _URL = typeof URL !== 'undefined' ? URL : require('url').URL\n\n//\n// Exception types\n//\n\n/**\n * Enumeration of all error types raised by `OtpauthInvalidURL`.\n */\nexport const ErrorType = {\n    INVALID_ISSUER: 0,\n    INVALID_LABEL: 1,\n    INVALID_PROTOCOL: 2,\n    MISSING_ACCOUNT_NAME: 3,\n    MISSING_COUNTER: 4,\n    MISSING_ISSUER: 5,\n    MISSING_SECRET_KEY: 6,\n    UNKNOWN_OTP: 7,\n    INVALID_DIGITS: 8,\n    UNKNOWN_ALGORITHM: 9\n}\n\n/**\n * Exception thrown whenever there's an error deconstructing an 'otpauth://' URI.\n *\n * You can query the `errorType` attribute to obtain the exact reason for failure. The\n * `errorType` attributes contains a value from the `ErrorType` enumeration.\n */\nexport function OtpauthInvalidURL(errorType) {\n    this.name = 'OtpauthInvalidURL'\n    this.errorType = errorType\n    for (const type in ErrorType)\n        if (ErrorType[type] === errorType)\n            this.message =\n                'Given otpauth:// URL is invalid. (Error ' + type + ')'\n}\nOtpauthInvalidURL.prototype = new Error()\nOtpauthInvalidURL.prototype.constructor = OtpauthInvalidURL\n\nconst PossibleDigits = [6, 8]\nconst PossibleAlgorithms = ['SHA1', 'SHA256', 'SHA512', 'MD5']\n\n/**\n * Parses an OTPAuth URI.\n *\n * Parses an URL as described in Google Authenticator's \"KeyUriFormat\" document (see:\n * [https://github.com/google/google-authenticator/wiki/Key-Uri-Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format))\n * and returns an object that contains the following properties:\n *\n * - `account`: The account name.\n * - `digits`: The number of digits of the resulting OTP. Default is 6 (six).\n * - `key`: The shared key in Base32 encoding.\n * - `issuer`: Provider or service this account is associated with. The default is the empty string.\n * - `type`: Either the string `hotp` or `totp`.\n *\n * OTP of type `hotp` have an additional `counter` field which contains the start value for the\n * HOTP counter. In all other cases this field is missing from the resulting object.\n *\n **/\nexport function parse(rawUrl) {\n    const decode = decodeURIComponent\n    const ret = {}\n\n    //\n    // Protocol\n    //\n    let parsed\n\n    try {\n        parsed = new _URL(rawUrl)\n    } catch (error) {\n        throw error instanceof TypeError\n            ? new OtpauthInvalidURL(ErrorType.INVALID_PROTOCOL)\n            : error\n    }\n\n    if (parsed.protocol !== 'otpauth:') {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_PROTOCOL)\n    }\n\n    parsed.protocol = 'http'\n    parsed = new _URL(parsed)\n\n    //\n    // Type\n    //\n\n    const otpAlgo = decode(parsed.host)\n\n    if (otpAlgo !== 'hotp' && otpAlgo !== 'totp') {\n        throw new OtpauthInvalidURL(ErrorType.UNKNOWN_OTP)\n    }\n\n    ret.type = otpAlgo\n\n    //\n    // Label (contains account name, may contain issuer)\n    //\n\n    const label = parsed.pathname.substring(1)\n    const labelComponents = label.split(~label.indexOf(':') ? ':' : '%3A')\n    let issuer = ''\n    let account = ''\n\n    if (labelComponents.length === 1) {\n        account = decode(labelComponents[0])\n    } else if (labelComponents.length === 2) {\n        issuer = decode(labelComponents[0])\n        account = decode(labelComponents[1])\n    } else {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_LABEL)\n    }\n\n    if (account.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_ACCOUNT_NAME)\n    }\n\n    if (labelComponents.length === 2 && issuer.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.account = account\n\n    //\n    // Parameters\n    //\n\n    const parameters = parsed.searchParams\n\n    // Secret key\n    if (!parameters.has('secret')) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_SECRET_KEY)\n    }\n\n    ret.key = parameters.get('secret')\n\n    // Issuer\n    if (\n        parameters.has('issuer') &&\n        issuer &&\n        parameters.get('issuer') !== issuer\n    ) {\n        // If present, it must be equal to the \"issuer\" specified in the label.\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.issuer = parameters.get('issuer') || issuer\n\n    // OTP digits\n    ret.digits = 6 // Default is 6\n\n    if (parameters.has('digits')) {\n        const parsedDigits = parseInt(parameters.get('digits'), 10)\n        if (PossibleDigits.indexOf(parsedDigits) == -1) {\n            throw new OtpauthInvalidURL(ErrorType.INVALID_DIGITS)\n        } else {\n            ret.digits = parsedDigits\n        }\n    }\n\n    // Algorithm to create hash\n    if (parameters.has('algorithm')) {\n        if (PossibleAlgorithms.indexOf(parameters.get('algorithm')) == -1) {\n            throw new OtpauthInvalidURL(ErrorType.UNKNOWN_ALGORITHM)\n        } else {\n            // Optional 'algorithm' parameter.\n            ret.algorithm = parameters.get('algorithm')\n        }\n    }\n\n    // Period (only for TOTP)\n    if (otpAlgo === 'totp') {\n        // Optional 'period' parameter for TOTP.\n        if (parameters.has('period')) {\n            ret.period = parseFloat(parameters.get('period'))\n        }\n    }\n\n    // Counter (only for HOTP)\n    if (otpAlgo === 'hotp') {\n        if (!parameters.has('counter')) {\n            // We require the 'counter' parameter for HOTP.\n            throw new OtpauthInvalidURL(ErrorType.MISSING_COUNTER)\n        } else {\n            ret.counter = parseInt(parameters.get('counter'), 10)\n        }\n    }\n\n    return ret\n}\n"],"names":["_URL","URL","require","ErrorType","INVALID_ISSUER","INVALID_LABEL","INVALID_PROTOCOL","MISSING_ACCOUNT_NAME","MISSING_COUNTER","MISSING_ISSUER","MISSING_SECRET_KEY","UNKNOWN_OTP","INVALID_DIGITS","UNKNOWN_ALGORITHM","OtpauthInvalidURL","errorType","this","name","type","message","prototype","Error","constructor","PossibleDigits","PossibleAlgorithms","parse","rawUrl","decode","decodeURIComponent","ret","parsed","error","TypeError","protocol","otpAlgo","host","label","pathname","substring","labelComponents","split","indexOf","issuer","account","length","parameters","searchParams","has","key","get","digits","parsedDigits","parseInt","algorithm","period","parseFloat","counter"],"mappings":"AAKA,MAAMA,EAAsB,oBAARC,IAAsBA,IAAMC,QAAQ,OAAOD,IASlDE,EAAY,CACrBC,eAAgB,EAChBC,cAAe,EACfC,iBAAkB,EAClBC,qBAAsB,EACtBC,gBAAiB,EACjBC,eAAgB,EAChBC,mBAAoB,EACpBC,YAAa,EACbC,eAAgB,EAChBC,kBAAmB,GAShB,SAASC,EAAkBC,GAC9BC,KAAKC,KAAO,oBACZD,KAAKD,UAAYA,EACjB,IAAK,MAAMG,KAAQf,EACXA,EAAUe,KAAUH,IACpBC,KAAKG,QACD,2CAA6CD,EAAO,KAEpEJ,EAAkBM,UAAY,IAAIC,MAClCP,EAAkBM,UAAUE,YAAcR,EAE1C,MAAMS,EAAiB,CAAC,EAAG,GACrBC,EAAqB,CAAC,OAAQ,SAAU,SAAU,OAmBjD,SAASC,EAAMC,GAClB,MAAMC,EAASC,mBACTC,EAAM,GAKZ,IAAIC,EAEJ,IACIA,EAAS,IAAI9B,EAAK0B,GACpB,MAAOK,GACL,MAAMA,aAAiBC,UACjB,IAAIlB,EAAkBX,EAAUG,kBAChCyB,EAGV,GAAwB,aAApBD,EAAOG,SACP,MAAM,IAAInB,EAAkBX,EAAUG,kBAG1CwB,EAAOG,SAAW,OAOlB,MAAMC,EAAUP,GANhBG,EAAS,IAAI9B,EAAK8B,IAMYK,MAE9B,GAAgB,SAAZD,GAAkC,SAAZA,EACtB,MAAM,IAAIpB,EAAkBX,EAAUQ,aAG1CkB,EAAIX,KAAOgB,EAMX,MAAME,EAAQN,EAAOO,SAASC,UAAU,GAClCC,EAAkBH,EAAMI,OAAOJ,EAAMK,QAAQ,KAAO,IAAM,OAChE,IAAIC,EAAS,GACTC,EAAU,GAEd,GAA+B,IAA3BJ,EAAgBK,OAChBD,EAAUhB,EAAOY,EAAgB,QAC9B,CAAA,GAA+B,IAA3BA,EAAgBK,OAIvB,MAAM,IAAI9B,EAAkBX,EAAUE,eAHtCqC,EAASf,EAAOY,EAAgB,IAChCI,EAAUhB,EAAOY,EAAgB,IAKrC,GAAII,EAAQC,OAAS,EACjB,MAAM,IAAI9B,EAAkBX,EAAUI,sBAG1C,GAA+B,IAA3BgC,EAAgBK,QAAgBF,EAAOE,OAAS,EAChD,MAAM,IAAI9B,EAAkBX,EAAUC,gBAG1CyB,EAAIc,QAAUA,EAMd,MAAME,EAAaf,EAAOgB,aAG1B,IAAKD,EAAWE,IAAI,UAChB,MAAM,IAAIjC,EAAkBX,EAAUO,oBAM1C,GAHAmB,EAAImB,IAAMH,EAAWI,IAAI,UAIrBJ,EAAWE,IAAI,WACfL,GACAG,EAAWI,IAAI,YAAcP,EAG7B,MAAM,IAAI5B,EAAkBX,EAAUC,gBAQ1C,GALAyB,EAAIa,OAASG,EAAWI,IAAI,WAAaP,EAGzCb,EAAIqB,OAAS,EAETL,EAAWE,IAAI,UAAW,CAC1B,MAAMI,EAAeC,SAASP,EAAWI,IAAI,UAAW,IACxD,IAA6C,GAAzC1B,EAAekB,QAAQU,GACvB,MAAM,IAAIrC,EAAkBX,EAAUS,gBAEtCiB,EAAIqB,OAASC,EAKrB,GAAIN,EAAWE,IAAI,aAAc,CAC7B,IAAgE,GAA5DvB,EAAmBiB,QAAQI,EAAWI,IAAI,cAC1C,MAAM,IAAInC,EAAkBX,EAAUU,mBAGtCgB,EAAIwB,UAAYR,EAAWI,IAAI,aAavC,GARgB,SAAZf,GAEIW,EAAWE,IAAI,YACflB,EAAIyB,OAASC,WAAWV,EAAWI,IAAI,YAK/B,SAAZf,EAAoB,CACpB,IAAKW,EAAWE,IAAI,WAEhB,MAAM,IAAIjC,EAAkBX,EAAUK,iBAEtCqB,EAAI2B,QAAUJ,SAASP,EAAWI,IAAI,WAAY,IAI1D,OAAOpB"}