{"version":3,"file":"url-otpauth-ng.js","sources":["../index.js"],"sourcesContent":["/*!\n * https://github.com/huihuimoe/url-otpauth-ng\n * Released under the MIT license\n */\n\nconst _URL = typeof URL !== 'undefined' ? URL : require('url').URL\n\n//\n// Exception types\n//\n\n/**\n * Enumeration of all error types raised by `OtpauthInvalidURL`.\n */\nexport const ErrorType = {\n    INVALID_ISSUER: 0,\n    INVALID_LABEL: 1,\n    INVALID_PROTOCOL: 2,\n    MISSING_ACCOUNT_NAME: 3,\n    MISSING_COUNTER: 4,\n    MISSING_ISSUER: 5,\n    MISSING_SECRET_KEY: 6,\n    UNKNOWN_OTP: 7,\n    INVALID_DIGITS: 8,\n    UNKNOWN_ALGORITHM: 9\n}\n\n/**\n * Exception thrown whenever there's an error deconstructing an 'otpauth://' URI.\n *\n * You can query the `errorType` attribute to obtain the exact reason for failure. The\n * `errorType` attributes contains a value from the `ErrorType` enumeration.\n */\nexport function OtpauthInvalidURL(errorType) {\n    this.name = 'OtpauthInvalidURL'\n    this.message = 'Given otpauth:// URL is invalid. (Error ' + errorType + ')'\n    this.errorType = errorType\n}\nOtpauthInvalidURL.prototype = new Error()\nOtpauthInvalidURL.prototype.constructor = OtpauthInvalidURL\n\nconst PossibleDigits = [6, 8]\nconst PossibleAlgorithms = ['SHA1', 'SHA256', 'SHA512', 'MD5']\n\n/**\n * Parses an OTPAuth URI.\n *\n * Parses an URL as described in Google Authenticator's \"KeyUriFormat\" document (see:\n * [https://github.com/google/google-authenticator/wiki/Key-Uri-Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format))\n * and returns an object that contains the following properties:\n *\n * - `account`: The account name.\n * - `digits`: The number of digits of the resulting OTP. Default is 6 (six).\n * - `key`: The shared key in Base32 encoding.\n * - `issuer`: Provider or service this account is associated with. The default is the empty string.\n * - `type`: Either the string `hotp` or `totp`.\n *\n * OTP of type `hotp` have an additional `counter` field which contains the start value for the\n * HOTP counter. In all other cases this field is missing from the resulting object.\n *\n **/\nexport function parse(rawUrl) {\n    const ret = {}\n\n    //\n    // Protocol\n    //\n    let parsed\n\n    try {\n        parsed = new _URL(rawUrl)\n    } catch (error) {\n        throw error instanceof TypeError\n            ? new OtpauthInvalidURL(ErrorType.INVALID_PROTOCOL)\n            : error\n    }\n\n    if (parsed.protocol !== 'otpauth:') {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_PROTOCOL)\n    }\n\n    parsed.protocol = 'http'\n    parsed = new _URL(parsed)\n\n    //\n    // Type\n    //\n\n    const otpAlgo = decodeURIComponent(parsed.host)\n\n    if (otpAlgo !== 'hotp' && otpAlgo !== 'totp') {\n        throw new OtpauthInvalidURL(ErrorType.UNKNOWN_OTP)\n    }\n\n    ret.type = otpAlgo\n\n    //\n    // Label (contains account name, may contain issuer)\n    //\n\n    const label = parsed.pathname.substring(1)\n    const labelComponents = label.split(~label.indexOf(':') ? ':' : '%3A')\n    let issuer = ''\n    let account = ''\n\n    if (labelComponents.length === 1) {\n        account = decodeURIComponent(labelComponents[0])\n    } else if (labelComponents.length === 2) {\n        issuer = decodeURIComponent(labelComponents[0])\n        account = decodeURIComponent(labelComponents[1])\n    } else {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_LABEL)\n    }\n\n    if (account.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_ACCOUNT_NAME)\n    }\n\n    if (labelComponents.length === 2 && issuer.length < 1) {\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.account = account\n\n    //\n    // Parameters\n    //\n\n    const parameters = parsed.searchParams\n\n    // Secret key\n    if (!parameters.has('secret')) {\n        throw new OtpauthInvalidURL(ErrorType.MISSING_SECRET_KEY)\n    }\n\n    ret.key = parameters.get('secret')\n\n    // Issuer\n    if (\n        parameters.has('issuer') &&\n        issuer &&\n        parameters.get('issuer') !== issuer\n    ) {\n        // If present, it must be equal to the \"issuer\" specified in the label.\n        throw new OtpauthInvalidURL(ErrorType.INVALID_ISSUER)\n    }\n\n    ret.issuer = issuer || parameters.get('issuer') || ''\n\n    // OTP digits\n    ret.digits = 6 // Default is 6\n\n    if (parameters.has('digits')) {\n        const parsedDigits = parseInt(parameters.get('digits'), 10)\n        if (PossibleDigits.indexOf(parsedDigits) == -1) {\n            throw new OtpauthInvalidURL(ErrorType.INVALID_DIGITS)\n        } else {\n            ret.digits = parsedDigits\n        }\n    }\n\n    // Algorithm to create hash\n    if (parameters.has('algorithm')) {\n        if (PossibleAlgorithms.indexOf(parameters.get('algorithm')) == -1) {\n            throw new OtpauthInvalidURL(ErrorType.UNKNOWN_ALGORITHM)\n        } else {\n            // Optional 'algorithm' parameter.\n            ret.algorithm = parameters.get('algorithm')\n        }\n    }\n\n    // Period (only for TOTP)\n    if (otpAlgo === 'totp') {\n        // Optional 'period' parameter for TOTP.\n        if (parameters.has('period')) {\n            ret.period = parseFloat(parameters.get('period'))\n        }\n    }\n\n    // Counter (only for HOTP)\n    if (otpAlgo === 'hotp') {\n        if (!parameters.has('counter')) {\n            // We require the 'counter' parameter for HOTP.\n            throw new OtpauthInvalidURL(ErrorType.MISSING_COUNTER)\n        } else {\n            ret.counter = parseInt(parameters.get('counter'), 10)\n        }\n    }\n\n    return ret\n}\n"],"names":[],"mappings":"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"}